image: openjdk:8-jdk

before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
  - unzip -d android-sdk-linux android-sdk.zip
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
  - export ANDROID_HOME=$PWD/android-sdk-linux
  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
  - chmod +x ./gradlew
  # temporarily disable checking for EPIPE error and use yes to accept all licenses
  - set +o pipefail
  - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
  - set -o pipefail

stages:
  - build
  - test
  - deploy

assembleDebug:
  stage: build
  tags:
        - hva
  only:
      refs:
          - master
      changes:
        - "app/**/*"
  script:
    - ./gradlew assembleDebug  

unitTest:
  stage: test
  tags:
        - hva
  only:
      refs:
          - master
      changes:
        - "app/**/*"
  script:
    - ./gradlew test

deploy:
  stage: deploy
  tags:
        - hva
  only:
      refs:
          - master
      changes:
        - "app/**/*"
  script:
    - git checkout master
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git pull
    - cd apk
    - rm PolitieApp.apk
    - cd ..
    - ./gradlew assembleDebug
    - cp app/build/outputs/apk/debug/app-debug.apk apk/PolitieApp.apk
    - git add apk/PolitieApp.apk
    - git commit -m "${COMMIT_MESSAGE}"
    - git push "https://${GITLAB_USERNAME}:${GITLAB_TOKEN}@${CI_REPOSITORY_URL#*@}" "HEAD:master"